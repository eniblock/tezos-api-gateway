import supertest from 'supertest';
import { WebProcess } from '../../../../../../src/processes/web/web-process';
import {
  postgreConfig,
  serverConfig,
  tezosNodeUrl,
} from '../../../../../__fixtures__/config';
import { TezosService } from '../../../../../../src/services/tezos';
import { SignerFactory } from '../../../../../../src/services/signer-factory';
import { FakeSigner } from '../../../../../../src/services/signers/fake-signer';
import { PostgreService } from '../../../../../../src/services/postgre';

describe('[processes/web/api/storage] Deploy Contract Controller', () => {
  const webProcess = new WebProcess({ server: serverConfig });
  const tezosService = new TezosService(tezosNodeUrl);
  const postgreService = new PostgreService(postgreConfig);
  const fakeSigner = new FakeSigner('pkh', '');
  const signerFactory = new SignerFactory();

  webProcess.postgreService = postgreService;

  const request: supertest.SuperTest<supertest.Test> = supertest(
    webProcess.app,
  );

  beforeAll(async () => {
    webProcess.signerFactory = signerFactory;
    await webProcess.start();
  });

  beforeEach(() => {
    jest
      .spyOn(webProcess.gatewayPool, 'getTezosService')
      .mockResolvedValue(tezosService);
  });

  afterEach(() => {
    jest.restoreAllMocks();
  });

  afterAll(async () => {
    await webProcess.stop();
  });

  describe('#compileAndDeployContract', () => {
    it('Should return 400 when secureKeyName has unexpected value and smartContractCode is correct', async () => {
      const { body, status } = await request
        .post('/api/tezos_node/contract/deploy')
        .set('Content-Type', 'application/json')
        .send({
          secureKeyName: 'nothing',
          smartContractCode:
            'aW1wb3J0IHNtYXJ0cHkgYXMgc3AKCmNsYXNzIENvdW50ZXIoc3AuQ29udHJhY3QpOgoKICAgIGRlZiBfX2luaXRfXyhzZWxmLCBpbml0aWFsVmFsKToKICAgICAgICBzZWxmLmluaXQoCiAgICAgICAgICAgIHZhbHVlID0gaW5pdGlhbFZhbAogICAgICAgICkKCiAgICBkZWYgaW5jcmVtZW50KHNlbGYsIGFtb3VudCk6CiAgICAgICAgc2VsZi5kYXRhLnZhbHVlICs9IGFtb3VudAoKCiAgICBkZWYgZGVjcmVtZW50KHNlbGYsIGFtb3VudCk6CiAgICAgICAgc2VsZi5kYXRhLnZhbHVlIC09IGFtb3VudAoKCgpAc3AuYWRkX3Rlc3QobmFtZSA9ICJDb3VudGVyIikKZGVmIHRlc3QoKToKICAgIHNjZW5hcmlvID0gc3AudGVzdF9zY2VuYXJpbygpCgogICAgY291bnRlciA9IENvdW50ZXIoNSkKICAgIHNjZW5hcmlvICs9IGNvdW50ZXIKICAgIHNwLmFkZF9jb21waWxhdGlvbl90YXJnZXQoJ2NvdW50ZXIgdGFyZ2V0JywgQ291bnRlcigyKSkK',
        });

      expect(status).toEqual(404);
      expect(body).toEqual({
        message: 'Error while fetching public key with the key name: nothing',
        status: 404,
      });
    });

    it('Should return 200 when secureKeyName is correct and smartContractCode is correct', async () => {
      jest.spyOn(tezosService, 'deployContract').mockResolvedValue({
        operation_hash: 'operation_hash',
        contract_address: 'contract_address',
      });
      jest.spyOn(signerFactory, 'generateSigner').mockReturnValue(fakeSigner);

      const { body, status } = await request
        .post('/api/tezos_node/contract/deploy')
        .set('Content-Type', 'application/json')
        .send({
          secureKeyName: 'admin',
          smartContractCode:
            'aW1wb3J0IHNtYXJ0cHkgYXMgc3AKCmNsYXNzIENvdW50ZXIoc3AuQ29udHJhY3QpOgoKICAgIGRlZiBfX2luaXRfXyhzZWxmLCBpbml0aWFsVmFsKToKICAgICAgICBzZWxmLmluaXQoCiAgICAgICAgICAgIHZhbHVlID0gaW5pdGlhbFZhbAogICAgICAgICkKCiAgICBkZWYgaW5jcmVtZW50KHNlbGYsIGFtb3VudCk6CiAgICAgICAgc2VsZi5kYXRhLnZhbHVlICs9IGFtb3VudAoKCiAgICBkZWYgZGVjcmVtZW50KHNlbGYsIGFtb3VudCk6CiAgICAgICAgc2VsZi5kYXRhLnZhbHVlIC09IGFtb3VudAoKCgpAc3AuYWRkX3Rlc3QobmFtZSA9ICJDb3VudGVyIikKZGVmIHRlc3QoKToKICAgIHNjZW5hcmlvID0gc3AudGVzdF9zY2VuYXJpbygpCgogICAgY291bnRlciA9IENvdW50ZXIoNSkKICAgIHNjZW5hcmlvICs9IGNvdW50ZXIKICAgIHNwLmFkZF9jb21waWxhdGlvbl90YXJnZXQoJ2NvdW50ZXIgdGFyZ2V0JywgQ291bnRlcigyKSkK',
        });

      expect(status).toEqual(201);
      expect(body).toEqual({
        operation_hash: 'operation_hash',
        contract_address: 'contract_address',
      });
    });

    it('Should return 200 when secureKeyName is correct and smartContractCode is correct and storage object is set', async () => {
      jest.spyOn(tezosService, 'deployContract').mockResolvedValue({
        operation_hash: 'operation_hash',
        contract_address: 'contract_address',
      });
      jest.spyOn(signerFactory, 'generateSigner').mockReturnValue(fakeSigner);

      const { body, status } = await request
        .post('/api/tezos_node/contract/deploy')
        .set('Content-Type', 'application/json')
        .send({
          secureKeyName: 'admin',
          smartContractCode:
            '',
          storageObj: {
            administrator: 'tz1hG1QqTMsd8XPpJkGwRmUeVBdNZSGDCPuQ',
            all_tokens: 0,
            ledger: {},
            metadata: {},
            operators: {},
            paused: false,
            token_metadata: {},
            total_supply: {},
          },
        });

      expect(body).toEqual({
        operation_hash: 'operation_hash',
        contract_address: 'contract_address',
      });
      expect(status).toEqual(201);
    });
  });
});
