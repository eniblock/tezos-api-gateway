image:
  repository: "registry.gitlab.com/xdev-tech/xdev-enterprise-business-network/tezos-api-gateway"
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  # tag: "sometag"

imagePullSecrets:
  - name: gitlab-registry
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

api:
  enabled: true

  replicaCount: 1

  podAnnotations: {}

  networkPolicy:
    enabled: true

  podSecurityContext: {}
  # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
  # runAsUser: 1000

  service:
    type: ClusterIP
    port: 3333

  ingress:
    enabled: false
    certManager: true
    annotations:
      kubernetes.io/tls-acme: "true"

  resources:
    requests:
      cpu: 50m
      memory: 75Mi

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  nodeSelector: {}

  tolerations: []

  affinity: {}

  numberOfOperationConfirmation: 1

  metrics:
    enabled: true
    interval:
    scrapeTimeout:

generatedApi:
  enabled: false

  # the contract served by the generated api (mandatory when generatedApi.enabled is true)
  contract:

  replicaCount: 1

  podAnnotations: {}

  networkPolicy:
    enabled: true

  podSecurityContext: {}
  # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
  # runAsUser: 1000

  service:
    type: ClusterIP
    port: 3333

  ingress:
    enabled: false
    certManager: true
    annotations:
      kubernetes.io/tls-acme: "true"

  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
  #   memory: 128Mi

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  nodeSelector: {}

  tolerations: []

  affinity: {}

  numberOfOperationConfirmation: 1

  metrics:
    enabled: false # Add metrics server first
    interval:
    scrapeTimeout:

operationStatusWorker:
  enabled: true

  replicaCount: 1

  podAnnotations: {}

  networkPolicy:
    enabled: true

  podSecurityContext: {}
  # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

  service:
    type: ClusterIP
    port: 9465

  resources:
    requests:
      cpu: 50m
      memory: 100Mi

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  nodeSelector: {}

  tolerations: []

  affinity: {}

  numberOfOperationConfirmation: 1

  metrics:
    enabled: true
    interval:
    scrapeTimeout:

sendTransactionsWorker:
  enabled: true

  replicaCount: 1

  podAnnotations: {}

  networkPolicy:
    enabled: true

  podSecurityContext: {}
  # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

  service:
    type: ClusterIP
    port: 9466

  resources:
    requests:
      cpu: 50m
      memory: 75Mi

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  nodeSelector: {}

  tolerations: []

  affinity: {}

  numberOfOperationConfirmation: 1

  metrics:
    enabled: true
    interval:
    scrapeTimeout:

injectionWorker:
  enabled: true

  replicaCount: 1

  podAnnotations: {}

  networkPolicy:
    enabled: true

  podSecurityContext: {}
  # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

  service:
    type: ClusterIP
    port: 9467

  resources:
    requests:
      cpu: 50m
      memory: 75Mi

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  nodeSelector: {}

  tolerations: []

  affinity: {}

  numberOfOperationConfirmation: 1

  metrics:
    enabled: true
    interval:
    scrapeTimeout:

db:
  nameOverride: db
  auth:
    existingSecret: "{{ .Release.Name }}-{{ .Values.nameOverride }}"
    database: tezos_api_gateway
    username: tezos-service
  persistence:
    enabled: true
    size: 1Gi
  resources:
    requests:
      memory: 50Mi
      cpu: 50m
  primary:
    service:
      ports:
        postgresql: 5432
    annotations:
      reloader.stakater.com/auto: "true"
  rbac:
    create: true
  serviceAccount:
    create: true
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true
    resources:
      requests:
        memory: 32Mi
        cpu: 10m
  networkPolicy:
    enabled: true
    ingressRules:
      primaryAccessOnlyFrom:
        enabled: true
        podSelector:
          '{{ template "common.names.fullname" . }}-client': "true"

rabbitmq:
  nameOverride: rabbitmq
  commonAnnotations:
    reloader.stakater.com/auto: "true"
  auth:
    tls:
      enabled: true
      existingSecretFullChain: true
      existingSecret: "{{ .Release.Name }}-{{ .Values.nameOverride }}-tls-secret"
      sslOptionsVerify: verify_none
    existingPasswordSecret: "{{ .Release.Name }}-{{ .Values.nameOverride }}"
    existingErlangSecret: "{{ .Release.Name }}-{{ .Values.nameOverride }}"
  persistence:
    enabled: true
    size: 1Gi
  loadBalancer:
    host: localhost
    secretName: "{{ .Release.Name }}-{{ .Values.rabbitmq.nameOverride }}-tls-secret"
    issuerRef:
      kind: ClusterIssuer
      name: local
  resources:
    requests:
      cpu: 500m
      memory: 300Mi
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true
  networkPolicy:
    enabled: true
    allowExternal: false

vault:
  nameOverride: vault
  server:
    debug: false

    dev:
      enabled: false
      existingSecret: "{{ .Release.Name }}-{{ .Values.nameOverride }}-root-token"

    standalone:
      enabled: true
      sealType:
      googleProject:
      googleRegion:
      gcpckmsSealKeyRing:
      gcpckmsSealCryptoKey:
      initPath:
      initToken:

  deploymentStrategy:
    type: Recreate # To avoid volume mount issue with multiple nodes (aka Multi-Attach error for volume)

  resources:
    requests:
      cpu: 50m
      memory: 125Mi
  service:
    port: 8200
