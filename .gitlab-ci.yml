stages:
  - test
  - publish

variables:
  CONTAINER_TEST_IMAGE: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG

test:
  stage: test
  image: node:14.15.4-alpine3.12
  services:
    - postgres:13.1-alpine
    - rabbitmq:3-management-alpine
  variables:
    POSTGRES_DB: tezos_api_gateway_test
    POSTGRES_USER: tezos-service
    POSTGRES_PASSWORD: randompwd
    DB_HOST_TEST: postgres
    AMQP_URL: amqp://rabbitmq
  before_script:
    - npm i
  script:
    - npm test

publish_docker:
  stage: publish
  image:
    name: tbxdev/build-docker
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - env
    - buildctl-daemonless.sh build
      --frontend dockerfile.v0
      --local context=.
      --local dockerfile=.
      --export-cache type=registry,ref=$CI_REGISTRY_IMAGE:build-cache,push=true
      --import-cache type=registry,ref=$CI_REGISTRY_IMAGE:build-cache
      --output type=image,name=$CONTAINER_TEST_IMAGE,push=true

publish_helm:
  stage: publish
  image:
    name: alpine/helm:3.5.2
    entrypoint: ["/bin/sh", "-c"]
  variables:
    HELM_EXPERIMENTAL_OCI: 1
    HELM_IMAGE: $CI_REGISTRY_IMAGE/helm/tezos-api-gateway:0.1.0
  script:
    - helm registry login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - helm dependency update ./helm/tezos-api-gateway
    - helm chart save ./helm/tezos-api-gateway $HELM_IMAGE
    - helm chart push $HELM_IMAGE
