import { Pool } from 'pg';

import { PostgreConfig } from '../const/interfaces/postgre-config';
import { postgreConfig } from '../config';
import { PostgreTypes } from '../const/postgre/postgre-types';
import { PostgreTables } from '../const/postgre/postgre-tables';

export class PostgreService {
  private _pool: Pool;
  private _config: PostgreConfig;

  constructor(config: PostgreConfig = postgreConfig) {
    this._config = config;
    this._pool = new Pool(this._config);
  }

  public get pool() {
    return this._pool;
  }

  public get config() {
    return this._config;
  }

  public async disconnect() {
    this._pool.end();
  }

  public async initializeDatabase() {
    if (!(await this.checkIfTypeExist(PostgreTypes.JOB_STATUS))) {
      await this._pool.query(
        `CREATE TYPE job_status AS ENUM ('created', 'published', 'done', 'error')`,
      );
    }

    await this._pool.query(`CREATE TABLE IF NOT EXISTS ${PostgreTables.JOBS} (
        id INT GENERATED BY DEFAULT AS IDENTITY,
        status job_status NOT NULL,
        raw_transaction TEXT,
        operation_hash TEXT,
        error_message TEXT,
        PRIMARY KEY (id)
      )`);

    await this._pool
      .query(`CREATE TABLE IF NOT EXISTS ${PostgreTables.TRANSACTION} (
        id INT GENERATED BY DEFAULT AS IDENTITY,
        job_id INT NOT NULL,
        destination TEXT NOT NULL,
        source TEXT NOT NULL,
        parameters TEXT,
        parameters_json TEXT,
        amount INT,
        fee INT,
        storage_limit INT,
        gas_limit INT,
        counter INT,
        branch TEXT,
        PRIMARY KEY (id),
        CONSTRAINT fk_job
            FOREIGN KEY(job_id) 
            REFERENCES jobs(id)
      )`);

    await this._pool.query(`
        ALTER TABLE ${PostgreTables.TRANSACTION} ADD COLUMN IF NOT EXISTS caller_id VARCHAR(100);
      `);
  }

  private async checkIfTypeExist(typeName: string) {
    const result = await this._pool.query(
      `SELECT typname FROM pg_type WHERE typname = '${typeName}'`,
    );

    return result.rows.length > 0;
  }
}
